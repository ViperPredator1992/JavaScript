//'use strict';

// Контекст вызова - this

console.log(this);

/* this - это ключевое слово. 
Вообще this это ссылка на какой-то объект. this - всегда ссылается на объект. 
Во время функции создается правило активации, именно во время вызова! Не во время чтения её интерпритатором.
Создается запись активация, которая содержит информацию - от куда вызвана функция, как вызвана, какие параметры переданы и т.д.
Одно из свойств я вляется ссылка this, которая будет использоватся на протяжении выполнения этой функции.
У this есть 4 поведения или по другому - правила. Чтобы понять this, надо понимать, что такое call stek(стек вызова функции) и call site(место вызова функции).*/
// Пример что такое call site

function one() {
    
    console.log('one');
    two();

}
function two() {
    
    console.log('two');
    three();
    
}
function three() {
    
    console.log('three');

}

one();

/* 4 Правила про this */

// 1.
// 2.
// 3.
// 4.

/* Правило 1 - привязка по умолчанию */

function test() {
    console.log('Hello', this);
}
test();

a = 10; // или var 
function test2() {
    console.log('Hello', this.a);
}
test2();

/* Как понять, что this ссылается на глобальный объект? 
Если функция вызывается без точки( test2(); ), т.е. не как метод, тогда this будет window!
Даже если внутри функции, задать функцию то мы получим глобальный объект window.
this - не как не связан с областями видимости.
*/

a = 10; // или var 

function test2() {

    console.log('Hello', this.a);

    function test3() {
        console.log('Hello', this);
    }
    test3();

}
test2();